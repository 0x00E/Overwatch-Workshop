variables
{
	global:
		26: dunnyAI
}

rule("general")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Match Time(-10000.000);
		Pause Match Time;
		Create HUD Text(All Players(Team 1), Custom String("激素体验设施", Null, Null, Null), Null, Null, Top, 0, Lime Green, White, White,
			Visible To and String, Default Visibility);
		Create HUD Text(All Players(Team 1), Custom String("表情(上)切换英雄", Null, Null, Null), Null, Null, Left, 0, Yellow, White, White,
			Visible To and String, Default Visibility);
		Create HUD Text(All Players(Team 1), Custom String("互动键(F)传送到目标", Null, Null, Null), Null, Null, Left, 0, Yellow, White, White,
			Visible To and String, Default Visibility);
		Set Global Variable(dunnyAI, Hero(Doomfist));
	}
}

rule("player")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Set Status(Event Player, Null, Unkillable, 9999);
		Set Max Health(Event Player, Multiply(9999999.000, 9999999.000));
		Wait(0.250, Ignore Condition);
		Heal(Event Player, Null, Multiply(9999999.000, 9999999.000));
		Set Damage Dealt(Event Player, Multiply(9999999.000, 9999999.000));
		Teleport(Event Player, Nearest Walkable Position(Objective Position(Objective Index)));
	}
}

rule("ana")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ana;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Invisible(Event Player, All);
		Set Status(Event Player, Null, Phased Out, 9999);
	}
}

rule("respawn")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Attacker != Victim;
	}

	actions
	{
		Resurrect(Event Player);
		Teleport(Event Player, World Vector Of(Vector(0, 0, 0), Event Player, Rotation And Translation));
	}
}

rule("AI")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Nearest Walkable Position(Objective Position(Objective Index)));
		Set Max Health(Event Player, Multiply(9999999.000, 9999999.000));
		Wait(0.250, Ignore Condition);
		Heal(Event Player, Null, Multiply(9999999.000, 9999999.000));
		Create Icon(All Players(All Teams), Event Player, Warning, Visible To and Position, Orange, True);
	}
}

rule("nano")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Ana);
		Or(Is Using Ultimate(Event Player), Player Variable(Event Player, R)) == True;
		Is Using Ultimate(Players In Slot(Add(Slot Of(Event Player), 3), Team Of(Event Player))) == False;
	}

	actions
	{
		Set Player Variable(Event Player, A, Players In Slot(Add(Slot Of(Event Player), 3), Team Of(Event Player)));
		Teleport(Player Variable(Event Player, A), Event Player);
		Start Facing(Player Variable(Event Player, A), Direction Towards(Eye Position(Player Variable(Event Player, A)), Position Of(
			Event Player)), 10000, To World, Direction and Turn Rate);
		Press Button(Player Variable(Event Player, A), Ultimate);
		Wait(0.250, Ignore Condition);
		Press Button(Player Variable(Event Player, A), Ultimate);
		Stop Facing(Event Player);
		Wait(0.250, Ignore Condition);
		Teleport(Player Variable(Event Player, A), Vector(10000, 10000, 10000));
	}
}

rule("throwing respawn")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Attacker == Victim;
	}

	actions
	{
		Respawn(Event Player);
	}
}

rule("Ctrl+emo+voice tp AI")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Communicating Any Emote(Event Player) == True;
		Is Communicating Any Voice line(Event Player) == True;
	}

	actions
	{
		Teleport(All Players(Team 2), Event Player);
	}
}

rule("ana")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Ultimate Charge Percent(Event Player) != 100;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("create ana")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Count Of(Filtered Array(All Players(Team 1), And(Compare(Hero Of(Current Array Element), ==, Hero(Ana)), Is Dummy Bot(
			Current Array Element)))) < 3;
	}

	actions
	{
		Create Dummy Bot(Hero(Ana), Team 1, 3, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Ana), Team 1, 4, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Ana), Team 1, 5, Vector(0, 0, 0), Vector(0, 0, 0));
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("dealt damage")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		All;
	}

	actions
	{
		Set Player Variable(Event Player, R, True);
		Wait(0.250, Ignore Condition);
		Set Player Variable(Event Player, R, False);
	}
}

rule("change hero")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Emote Up) == True;
	}

	actions
	{
		Respawn(Event Player);
	}
}

rule("teleport obj")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Teleport(Event Player, Nearest Walkable Position(Objective Position(Objective Index)));
	}
}

rule("zarya full power")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zarya;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Damage(Event Player, Null, Multiply(Health(Event Player), 0.250));
	}
}

rule("heal for low health")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Subtract(Max Health(Event Player), Health(Event Player)) >= 1000;
	}

	actions
	{
		Heal(Event Player, Null, Multiply(9999999.000, 9999999.000));
	}
}

rule("AI create")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Count Of(Filtered Array(All Players(Team 2), And(Compare(Hero Of(Current Array Element), ==, Global Variable(dunnyAI)),
			Is Dummy Bot(Current Array Element)))) < 6;
		disabled Or(Compare(Is Game In Progress, ==, True), Compare(Is Waiting For Players, ==, True)) == True;
	}

	actions
	{
		Create Dummy Bot(Global Variable(dunnyAI), Team 2, -1.000, Nearest Walkable Position(Objective Position(Objective Index)), Vector(
			0, 0, 0));
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("AI fire")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Closest Player To(Event Player, Team 1)), 10000, To World,
			Direction and Turn Rate);
		Start Holding Button(Event Player, Primary Fire);
	}
}

rule("AI right")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Secondary Fire);
		Wait(1, Ignore Condition);
		Stop Holding Button(Event Player, Secondary Fire);
		Loop;
	}
}

rule("AI ab1")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Ability 1);
		Wait(0.250, Ignore Condition);
		Stop Holding Button(Event Player, Ability 1);
		Loop;
	}
}

rule("AI ab2")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Ability 2);
		Wait(0.250, Ignore Condition);
		Stop Holding Button(Event Player, Ability 2);
		Loop;
	}
}

rule("AI space")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Jump);
		Wait(0.500, Ignore Condition);
		Stop Holding Button(Event Player, Jump);
		Loop;
	}
}

rule("AI throw respawn")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Nearest Walkable Position(Objective Position(Objective Index)));
	}
}

rule("AI go")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) >= 5;
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Closest Player To(Event Player, Team 1)),
			1, To World, Replace existing throttle, Direction and Magnitude);
	}
}

rule("AI stop go")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) < 5;
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Stop Throttle In Direction(Event Player);
	}
}